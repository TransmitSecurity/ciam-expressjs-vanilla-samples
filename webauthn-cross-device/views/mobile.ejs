<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Mobile Device</title>
    <link rel="stylesheet" href="/stylesheets/style.css"/>
    
    <script type="text/javascript"  src="https://cdn.identity.security/authentication-sdk/2.3.0/TsAuthSdk.min.js"></script>
    <script>
      let currentUser = undefined;

      function updateElementText(id, text) {
        try {
          document.getElementById(id).textContent = text;
        } catch(ex) { console.log(ex); }
      }

      /*
       * The first step on any WebAuthn flow would be to initialize the SDK. The below function should be called as soon as the page loads.
       * Note that since this is the authenticating device, we also check whether the device supports WebAuthn, and whether we already have
       * registered users. This allows us to present an "Authenticate or Register" user experience on the same page.
       * For more information see https://developer.transmitsecurity.com/guides/webauthn/cross_device_flows/#step-2-set-up-auth-device
       */
       async function init() {
        try {
          await window.WebAuthnSdk.init('<%= clientId%>', {serverPath: "https://webauthn.identity.security"});
          const bindingInfo = await window.WebAuthnSdk.attachDevice('<%= authSessionId%>');
          console.log(JSON.stringify(bindingInfo));
          currentUser = (await window.WebAuthnSdk.getDeviceUsers()).find((u) => {return u.isCurrent});
          console.log(currentUser);
          if (currentUser) {
            const elem = document.getElementById('authenticate');
            elem.removeAttribute('hidden');
            updateElementText('authnBtn', `Login with ${currentUser.username}`);
          }
        } catch (ex) {
          updateElementText('status', `Error during init: ${ex}`);
        }
      }


      async function doRegistration() {
        try {
          const username = document.getElementById('usnInput').value;
          await fetch("/mobile/authorize-session-user", {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              username: username, 
              authSessionId: '<%= authSessionId%>'
            })
          });
          await window.WebAuthnSdk.prepareWebauthnRegistration(username, username, '<%= authSessionId%>');
          const authCode = await window.WebAuthnSdk.executeWebauthnRegistration();
          updateElementText('status', `Completed with auth code: ${authCode}`);
          console.log(authCode);
        } catch (ex) {
          updateElementText('status', `Error during registration: ${ex}`);
        }
      }

      async function doAuthentication() {
        try {
          await window.WebAuthnSdk.prepareWebauthnAuthentication(currentUser.username);
          authCode = await window.WebAuthnSdk.executeWebauthnAuthentication();
          updateElementText('status', `Completed with auth code: ${authCode}`);
          console.log(authCode);
        } catch (ex) {
          updateElementText('status', `Error during authentication: ${ex}`);
        }
      }

      

    </script>
  </head>

  <body onload="init()">
    <h1>Mobile Device</h1>
    <span>Client ID = <%= clientId%></span>
    <p>Access this page via the QR</p>
    <p>authSessionId: <%=authSessionId%></p>
    <br><br>
    <div id="authenticate" hidden>
      <button id="authnBtn" onclick="doAuthentication()">Authenticate</button>
      <div class="divider">
        <span class="divider-text">or</span>
      </div>
    </div>
    <div id="register">
      <input id="usnInput" type="text" placeholder="Username"/>
      <br><br>
      <button id="regBtn" onclick="doRegistration()">Register New</button>
    </div>
    <br><br>
    <span id="status"></span>
  </body>
  
</html>
